package Lesson07;

/*
1. –†–∞—Å—à–∏—Ä–∏—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–æ –∫–æ—Ç–æ–≤ –∏ —Ç–∞—Ä–µ–ª–∫–∏ —Å –µ–¥–æ–π
2. –°–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –≤ —Ç–∞—Ä–µ–ª–∫–µ —Å –µ–¥–æ–π –Ω–µ –º–æ–≥–ª–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥—ã
(–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –º–∏—Å–∫–µ 10 –µ–¥—ã, –∞ –∫–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–∫—É—à–∞—Ç—å 15-20)
3. –ö–∞–∂–¥–æ–º—É –∫–æ—Ç—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ —Å—ã—Ç–æ—Å—Ç—å (–∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –∫–æ—Ç–æ–≤, –æ–Ω–∏ –≥–æ–ª–æ–¥–Ω—ã).
–ï—Å–ª–∏ –∫–æ—Ç—É —É–¥–∞–ª–æ—Å—å –ø–æ–∫—É—à–∞—Ç—å (—Ö–≤–∞—Ç–∏–ª–æ –µ–¥—ã), —Å—ã—Ç–æ—Å—Ç—å = true
4. –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ –∫–æ—Ç—É –º–∞–ª–æ –µ–¥—ã –≤ —Ç–∞—Ä–µ–ª–∫–µ, —Ç–æ –æ–Ω –µ–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç,
—Ç–æ –µ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É —Å—ã—Ç (—ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã)
5. –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∫–æ—Ç–æ–≤ –∏ —Ç–∞—Ä–µ–ª–∫—É —Å –µ–¥–æ–π, –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤—Å–µ—Ö –∫–æ—Ç–æ–≤ –ø–æ–∫—É—à–∞—Ç—å –∏–∑ —ç—Ç–æ–π —Ç–∞—Ä–µ–ª–∫–∏
–∏ –ø–æ—Ç–æ–º –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—ã—Ç–æ—Å—Ç–∏ –∫–æ—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
6. –î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞—Ä–µ–ª–∫—É –º–µ—Ç–æ–¥, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –µ–¥—É –≤ —Ç–∞—Ä–µ–ª–∫—É
 */

import java.util.Random;

public class Lesson07  extends ActionsAnimals {
    public static void main(String[] args) {
        Cat[] someCats = new Cat[5];
        Plate somePlate = new Plate();
        somePlate.setFoodInPlate(20);
        for (Cat cat : someCats) {
            System.out.println("–í —Ç–∞—Ä–µ–ª–∫–µ —Å–µ–π—á–∞—Å " + somePlate);
            cat = new Cat();
            System.out.println("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ç–∏–∫–∞ " + cat);
            catEats(somePlate, cat);
            System.out.println("–ö–æ—Ç–∏–∫ –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–∫—É—à–∞—Ç—å üê± " + cat + "\n***********");
        }
    }
}

class Cat {
    private Boolean isCatFull = false;
    private Integer catsAppetite = new Random().nextInt(10);
    //setters
    public void setCatsAppetite(Integer byValue) {
        if ((catsAppetite + byValue <= 0)) {
            catsAppetite = 0;
            isCatFull = true;
        } else {
            catsAppetite += byValue;
        }
    }
    //getters
    public Integer getCatsAppetite() { return catsAppetite;}
    public Boolean isCatFull() { return isCatFull;}
    // Object
    @Override
    public String toString() {
        return new String(this.getClass().getSimpleName() +
                " isCatFull: " + isCatFull + ", catsAppetite: " + catsAppetite);
    }

}
class Plate {
    private Integer foodInPlate = new Random().nextInt(10);
    //setters
    public void setFoodInPlate(Integer byValue) {
        if ((foodInPlate + byValue < 0)) {
            foodInPlate = 0;
        } else {
            foodInPlate += byValue;
        }
    }

    //getters
    public Integer getFoodInPlate() {return foodInPlate;}

    // Object
    @Override
    public String toString() {
        return new String(this.getClass().getSimpleName() +
                " foodInPlate: " + foodInPlate);
    }

}
class ActionsAnimals {
    static void catEats (Plate plate, Cat cat) {
        Integer oldAppetite = cat.getCatsAppetite();
        cat.setCatsAppetite(-plate.getFoodInPlate());
        plate.setFoodInPlate(-oldAppetite);
    }
}
